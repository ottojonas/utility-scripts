import logging
import os
import subprocess

import requests
from dotenv import load_dotenv
from icecream import ic
from phonenumbers import NumberParseException, is_valid_number, parse
from scapy.all import Dot11, sniff

load_dotenv()

# logging setup and formatting
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(funcName)s - %(lineno)s - %(levelname)s - %(message)s \n",
)


def collect_wifi_access_points(iface):
    wifi_access_points = []

    def packet_handler(packet):
        if packet.haslayer(Dot11):
            if (
                packet.type == 0 and packet.subtype == 8
            ):  # beacon frame check notepad.md for information on beacon frames
                ssid = packet.info.decode(
                    "utf-8", errors="ignore"
                )  # service set identifier
                bssid = packet.addr2  # basic service set identifier
                wifi_access_points.append({"ssid": ssid, "bssid": bssid})
                logging.debug(f"captured Wi-Fi AP: SSID={ssid}, BSSID={bssid}")

    try:
        result = subprocess.run(
            [
                "powershell",
                "-Command",
                "Get-NetAdapter | Select-Object -ExpandProperty Name",
            ],
            capture_output=True,
            text=True,
        )

        available_interfaces = result.stdout.split()
        logging.debug(f"available interfaces: {available_interfaces}")

        if iface not in available_interfaces:
            raise ValueError(
                f"interface {iface} not found. available interfaces: {available_interfaces}"
            )

        # powershell command to ensure interface is set to monitor mode
        logging.debug(f"setting interface {iface} to monitor mode")
        subprocess.run(
            [
                "powershell",
                "-Command",
                f"Set-NetAdapter -Name {iface} -MonitorMode Enabled",
            ],
            capture_output=True,
            text=True,
        )

        logging.debug(f"successfully set {iface} to monitor mode")
        logging.debug(f"starting packet sniffing on interface: {iface}")

        sniff(iface=iface, prn=packet_handler, store=0, timeout=120)

        logging.debug(f"finished packet sniffing, captured AP's: {wifi_access_points}")

        return wifi_access_points

    except ValueError as valerr:
        logging.error(f"value error: {valerr}")
    except OSError as oserr:
        logging.error(f"os error: {oserr}")
    except Exception as e:
        logging.error(f"unexpected error: {e}")
    return None


def collect_cell_towers():
    apiKey = os.getenv("OPENCELLID_API_KEY")
    if not apiKey:
        raise ValueError("opencellid_api_key environment variable not set")

    # placeholder coords, should be replaced with actual coords
    # lat, lon = 51.50, 0.11  # lat = latitude lon = longitude coords for london
    url = "https://us1.unwiredlabs.com/v2/process.php?"  # "?lat={lat}&lon={lon} can be removed if not needed"
    payload = {
        "key": apiKey,
        "radio": "gsm",  # gsm = global system for mobile communication
        "mcc": 44,  # mobile country code
        "mnc": 23420,  # mobile network code or system id
        "cells": [
            {"lac": 20, "cellid": 17811}
        ],  # lac = local area code cellid = cell tower id
        "address": 1,
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        data = response.json()
        cell_towers = []
        for cell in data.get("cells", []):
            cell_towers.append(
                {
                    "cellId": cell["cellid"],
                    "locationAreaCode": cell["lac"],
                    "mobileCountryCode": cell["mcc"],
                    "mobileNetworkCode": cell["mnc"],
                    "signalStrength": cell.get("signalStrength", -70),
                }
            )
        return cell_towers

    except requests.exceptions.HTTPError as httperr:
        logging.error(f"http error: {httperr}")
    except requests.exceptions.ConnectionError as connerr:
        logging.error(f"connection error: {connerr}")
    except requests.exceptions.Timeout as timeerr:
        logging.error(f"timeout error: {timeerr}")
    except requests.exceptions.RequestException as reqerr:
        logging.error(f"request error: {reqerr}")
    return []


def collect_dynamic_data():
    cell_towers = collect_cell_towers()
    wifi_access_points = collect_wifi_access_points(iface="Wi-Fi")
    return cell_towers, wifi_access_points


def get_location_from_phone_number(cell_towers=None, wifi_access_points=None):
    api_key = os.getenv("GOOGLE_API_KEY")

    url = f"https://www.googleapis.com/geolocation/v1/geolocate?key={api_key}"
    payload = {
        "considerIp": "false",
        "cellTowers": cell_towers if cell_towers else [],
        "wifiAccessPoints": wifi_access_points if wifi_access_points else [],
    }

    logging.debug(f"request url: {url}")
    logging.debug(f"request payload: {payload}")

    try:
        pass
    except requests.exceptions.HTTPError as httperr:
        logging.error(f"http error: {httperr}")
    except requests.exceptions.ConnectionError as connerr:
        logging.error(f"connection error: {connerr}")
    except requests.exceptions.Timeout as timeerr:
        logging.error(f"timeout error: {timeerr}")
    except requests.exceptions.RequestException as reqerr:
        logging.error(f"request error: {reqerr}")
    return None


def find_location(iface):
    wifi_access_points = collect_wifi_access_points()
    cell_tower_data = collect_cell_towers()

    # combine data and send to a location service api
    # placeholder at the moment
    location_data = {
        "wifi": wifi_access_points,
        "cell_towers": cell_tower_data,
    }
    logging.debug(f"location data: {location_data}")
    return location_data


def main():
    phone_number = input("enter phone number with country code (eg: +44 07123456789): ")
    try:
        parsed_number = parse(phone_number)
        if is_valid_number(parsed_number):
            cell_towers, wifi_access_points = collect_dynamic_data()
            location_data = get_location_from_phone_number(
                cell_towers, wifi_access_points
            )
            if location_data:
                ic(location_data)
            else:
                ic("failed to retrieve location data")
        else:
            ic("invalid phone number")
    except NumberParseException as e:
        ic(f"error parsing phone number: {e}")


if __name__ == "__main__":
    main()
