import logging
import os
import subprocess

import requests
from dotenv import load_dotenv
from scapy.all import Dot11, sniff

load_dotenv()

# Logging setup
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(funcName)s - %(lineno)d - %(levelname)s - %(message)s",
)


def collect_wifi_access_points(iface):
    wifi_access_points = []

    def packet_handler(packet):
        if packet.haslayer(Dot11):
            if packet.type == 0 and packet.subtype == 8:  # beacon frame check
                ssid = packet.info.decode(
                    "utf-8", errors="ignore"
                )  # service set identifier
                bssid = packet.addr2  # basic service set identifier
                wifi_access_points.append({"ssid": ssid, "bssid": bssid})
                logging.debug(f"Captured Wi-Fi AP: SSID={ssid}, BSSID={bssid}")

    try:
        result = subprocess.run(
            [
                "powershell",
                "-Command",
                "Get-NetAdapter | Select-Object -ExpandProperty Name",
            ],
            capture_output=True,
            text=True,
        )
        available_interfaces = result.stdout.split()
        logging.debug(f"Available interfaces: {available_interfaces}")
        if iface not in available_interfaces:
            raise ValueError(
                f"Interface {iface} not found. Available interfaces: {available_interfaces}"
            )

        # Ensure the interface is in monitor mode
        logging.debug(f"Setting interface {iface} to monitor mode")
        subprocess.run(
            [
                "powershell",
                "-Command",
                f"Set-NetAdapter -Name {iface} -MonitorMode Enabled",
            ],
            capture_output=True,
            text=True,
        )

        logging.debug(f"Starting packet sniffing on interface: {iface}")
        sniff(
            iface=iface, prn=packet_handler, store=0, timeout=120
        )  # Increased timeout to 120 seconds
        logging.debug(f"Finished packet sniffing. Captured APs: {wifi_access_points}")
        return wifi_access_points
    except ValueError as valerr:
        logging.error(f"Value error: {valerr}")
    except OSError as oserr:
        logging.error(f"OS error: {oserr}")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
    return None


def collect_cell_towers():
    apiKey = os.getenv("OPENCELLID_API_KEY")
    if not apiKey:
        raise ValueError("opencellid_api_key environment variable not set")

    url = "https://us1.unwiredlabs.com/v2/process.php"
    payload = {
        "key": apiKey,
        "radio": "gsm",
        "mcc": 44,
        "mnc": 23420,
        "cells": [{"lac": 20, "cellid": 17811}],
        "address": 1,
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        data = response.json()
        cell_towers = []
        for cell in data.get("cells", []):
            cell_towers.append(
                {
                    "cellId": cell["cellid"],
                    "locationAreaCode": cell["lac"],
                    "mobileCountryCode": cell["mcc"],
                    "mobileNetworkCode": cell["mnc"],
                    "signalStrength": cell.get("signalStrength", -70),
                }
            )
        return cell_towers

    except requests.exceptions.HTTPError as httperr:
        logging.error(f"HTTP error: {httperr}")
    except requests.exceptions.ConnectionError as connerr:
        logging.error(f"Connection error: {connerr}")
    except requests.exceptions.Timeout as timeerr:
        logging.error(f"Timeout error: {timeerr}")
    except requests.exceptions.RequestException as reqerr:
        logging.error(f"Request error: {reqerr}")
    return []


def find_location(iface):
    wifi_access_points = collect_wifi_access_points(iface)
    cell_tower_data = collect_cell_towers()

    # Combine data and send to a location service API
    location_data = {"wifi": wifi_access_points, "cell_towers": cell_tower_data}
    logging.debug(f"Location data: {location_data}")
    return location_data


# Example usage
iface = "Wi-Fi"  # Replace with your actual Wi-Fi interface name
location = find_location(iface)
logging.info(f"Estimated location: {location}")
