import json
import logging
import os

import requests
from dotenv import load_dotenv
from icecream import ic
from phonenumbers import NumberParseException, carrier, geocoder, parse

load_dotenv()
# Configure logging
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(funcName)s - %(lineno)d - %(levelname)s - %(message)s",
)


def main():
    try:
        number = input("/> Phone number country (+44 07703599902): ")
        GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
        if not GOOGLE_API_KEY:
            logging.error("Google API key not found in environment variables")
            return
        try:
            parsedNumber = parse(number.replace("", ""))
        except NumberParseException as e:
            logging.error(f"Error parsing phone number: {e}")
            return

        country = geocoder.description_for_number(parsedNumber, "en")
        service = carrier.name_for_number(parsedNumber, "en")

        # Google Maps Geocoding API URL
        google_maps_url = f"https://maps.googleapis.com/maps/api/geocode/json?address={country}&key={GOOGLE_API_KEY}"

        response = requests.get(google_maps_url)
        if response.status_code != 200:
            logging.error(
                f"Error fetching data from Google Maps API: {response.status_code}"
            )
            return

        phoneInformation = response.json()
        logging.debug(f"Google API phone informaiton: {phoneInformation}")

        if not phoneInformation["results"]:
            logging.error("No phone information returned from Google Maps API")
            return

        try:
            geometry = phoneInformation["results"][0]["geometry"]["location"]
            latitude = geometry["lat"]
            longitude = geometry["lng"]
            address_components = phoneInformation["results"][0]["address_components"]
            countryCode = next(
                (
                    component["short_name"]
                    for component in address_components
                    if "country" in component["types"]
                ),
                None,
            )
        except (IndexError, KeyError) as e:
            logging.error(f"Error accessing data in phone information: {e}")
            return

        if not os.path.exists("phoneData"):
            os.makedirs("phoneData")

        output = (
            f"===============RESULTS===============\n"
            f"* number: {number}\n"
            f"*country: {country} [{countryCode}]\n"
            f"*carrier: {service}\n"
            f"*latitude: {latitude} [approx]\n"
            f"*longitude: {longitude} [approx]\n"
            f"=============================="
        )
        ic(output)

        saveDataResponse = input("/> Do you want to save the data to a file? [y/n]: ")
        if saveDataResponse.lower() == "y":
            lastFourDigits = number[-4:]
            filePath = os.path.join("phoneData", f"phoneData({lastFourDigits}).txt")
            with open(filePath, "w") as dataFile:
                dataFile.write(output)
                dataFile.write("\n\nPhone Information:\n")
                dataFile.write(json.dumps(phoneInformation, indent=4))
            ic(f"Data saved to {filePath}")
    except Exception as e:
        logging.error(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    main()
